힙
	완전 이진트리의 일종으로 우선순위 큐를 위해 만들어진 자료구조이다.
	여러개의 값중에서 최댓갑이나 최솟값을 찾아내도록 만들어짐
	반정렬(느슨한 정렬상태)
	
	최대힙
	- 부모노드의 키값이 자식 노드의 키값보다 크거나 같다.
	
	최소힙
	- 부모노드의 키값이 자식노드의 키값보다 작거나같다.

	새로운 요소가 들어오면 새로운 노드를 힙의 마지막 노드에 삽입한다.

우선순위 큐

	대기열에서 우선순위가 높은요소가 낮은요소보다 먼저 제공되는것 라이브러리형태

맵
	key 와 value 로 이루어진 자료구조
	Red-black 트리로 구성되어있다.

	key의 중복을 허용하지 않는다.
	만약 사용하고싶다면 multimap을 사용하면된다.

	HashMap	
	-key 와 value쌍으로 구성될뿐 묶인 쌍들에 대한 순서는 보장할수 없다.
	TreeMap
	- key의 값을 토대로 순서대로 정렬하는 자료구조

셋
	특정 순서에 따라 고유한 요소를 저장하는 컨테이너

	hashset
	순서가 없는 배열 중복값을 가질수 없다.
	TreeSet  
	이진 탐색 트리를 기반으로 한다. 오름차순으로 정렬된다.

해시테이블	
	direct Adress Table
	키값을 주소로 사용하는 테이블
	무한한 데이터들을 유한하게 관리할수 있는 테이블이다.


해시테이블 - 충돌해결
	분리 연결법(seperate chaining)
	충돌시 연결리스트에 추가하는 방식이다.
	먼저 저장된 원소를 저장하고, 다음원소를 다음 주소에다가 저장한다.

	해시테이블 확장이 필요없고, 구현이 간단하다. 원소를 쉽게 삭제가능하다.
	데이터 수가많아지면 동일한 버킷에 chaining 되는 데이터가 많아지며 최악의 경우 O(N)이 되고
	선형 자료구조와 다를게 없어진다.

개방 주소법

	해시테이블의 비어있는 공간을 사용하는 방법
	1. Linear probing : 현재 버킷 index로 부터 고정값만큼 이동해서 비어있는곳에 저장
	2. Quadratic Probing: 해시의 저장 순서 폭을 1^2 2^2 3^2 식으로 이동해서 비어있는곳에 저장
	3. Doublie Hashing: 해싱된값을 한번더 해싱해서 규칙을 없애버리는것


