데이터베이스
데이터베이스를 사용하는 이유

데이터베이스 성능
	디스크 I/O를 어떻게 줄이느냐에서 시작된다.

데이터베이스 풀

	데이터 베이스의 추가 요청이 필요할때 재 사용이 가능한 데이터베이스의 연결 캐시이다.
	(메모리 영역)에 저장한다.

	
Index 란 무엇인가
	데이터베이스에서 검색 속도를 높여주는 자료구조이다. 책의 목차라고 비유할수도있다.

Primary index vs Secondary index
	클러스터드 인덱스 : 키 순서에 대해 데이터가 정렬되는 방식,인덱스를 검색하지않아또 
	논클러스터드 인덱스: 인덱스 페이지에 데이터가 직접 저장되지않고 자료의 주소가 저장된다. 리프레벨과 데이터페이지(실질적인 데이터가 들어가있는 곳이 분리되어있다.)


Composite index

Index 의 성능과 고려해야할 사항

Index 의 자료구조는 크게 Hash 인덱스와 B+Tree 인덱스가 있습니다. 이것은 무엇일까요?
	Hash 인덱스는 == 연산에 유리하지만  B+ 인덱스는 비교연산자에 유리하다.

인덱스 Scan 방식은 무엇이 있나요?
	수평적 탐색 : 트리의 가장 아래에있는 리프 노드끼리 연결된 순서에 따라 좌,우로 스캔하는방식
	수직적 탐색: 루트 노드에서 리프 노드까지 아래로 진행하기 때문에 수직적이라고 표현



인덱스 설계시 NULL값은 고려되야 할까요?
	고려하는것 이 좋다.

정규화

정규화 탄생 배경
	여러 엔티티(테이블)의 애트리 뷰트(속성)들을 혼합하게 되면 주로 중복되는 정보때문에 이상현상이 발생하게 된다.

이상현상의 개념
	삽입이상: 원치 않는 자료 삽입 OR 삽입하는데 자료가 부족해서 발생하는 현상
	삭제이상: 하나의 자료만 삭제하고싶지만, 튜플 전체가 연쇄적으로 삭제된다.
	수정이상: 정확하지 않거나 일부의 튜플만 갱신되어 정보가 모호해지거나, 일관성이 없어지는 현상


정규화란 무엇인가
	이상현상이 있는 릴레이션을 분해 하여 이상현상을 없애는 것을 정규화라고 부른다.

정규화의 종류
	제 1정규형
	도메인이 오직 원자값만 가져야한다.
	
	제 2정규형
	기본키가 아닌 속성이 기본키에 완전 함수 종속성일때 제 2정규형이라고한다.
	
	제 3정규형
	비주요 애트리뷰트(속성)들이 기본키에 대해 이행적 종속되지 않으면 제 3정규형 만족한다.
	BCNF
	

정규화의 장단점
	장점
	이상현상의 제거
	
	단점 
	릴레이션 간의 join 연산이 많아진다.

트랜잭션(Transaction)이란 무엇인가?
	데이터베이스에서 상태를 변환시키는 하나의 논리적인 작업단위를 구성하는 연산들의 집합이다.

트랜잭션과 Lock
	여러 트랜잭션이 동시에 동일한 자원을 요청할경우 순서대로 하나의 커넥션만 변경할수 있게해주는 역할을 한다.

트랜잭션의 특성
	A: 원자성, 트랜잭션의 모든연산은 정상적으로 수행완료되거나, 아예 수행되지않아야된다.
	C: 트랜잭션이 완료된 다음에도 트랜잭션이 일어나기전과 동일하게 데이터의 일관성을 보장해야한다.
	I: 각각의 트랜잭션은 서로 간섭없이 독립적으로 수행되어야한다.
	D: 지속성 성공적으로 수행된 트랜잭션은 영원히 반영되어야한다.


트랜잭션의 상태
	활동 -> 실행중인 트랜잭션
	장애 -> 실행에 오류가 발생해 중단된 상태
	철회 -> 트랜잭션이 비정상적으로 종료되어서 Rollback 연산 수행
	부분완료 -> 트랜잭션이 마지막 연산까지 실행됐지만, Commit 직전
	완료 -> 트랜잭션이 성공적으로 종료되어 Commit 연산 실행한 후의 상태

트랜잭션을 사용할 때 주의할 점

트랜잭션 격리 수준(Transaction Isolation Level)
	ReadUncommited - 커밋되지않은 데이터도 읽을수가 있다.
	ReadCommited - 커밋된 데이터만 읽을 수있다.
	Repeatable Read - transaction의 번호를 둬서 낮은 번호를 읽게 시킨다. **********************
	Serializable 가장 높은단계의 격리수준

DBMS 는 어떻게 트랜잭션을 관리할까?

join 까지