데이터 베이스의 종류

관계형 데이터베이스 
	행과 열을 가지는 표 형식 데이터 베이스 
	다른테이블 끼리 관계를 맺고 모여있는 집합체, 이를 위해서 외래키를 사용한다.

	MySQL
	B-트리 기반의 인덱스, 스레드 기반의 메모리할당,빠른조인 ,64개의 인덱스

	PostgresSQL
	Mysql다음으로 개발자들이 선호하는 데이터베이스
	VaCUUM 기능이 특징 : 디스크 조각이 차지하는 영역을 회수할 수 있는 장치


NOSQL
	document DB graph DB, key value DB
	
	sql 을 사용하지않는 데이터베이스

	MongoDB
	JSON을 통해 데이터를 접근 가능하고,도큐먼트 기반의 데이터베이스이다.

	Redis
	인메모리 데이터베이스 , 키 -값 데이터 모델 기반의 데이터 베이스


수평적 확장성 vs 수직적 확장성
nosql		rdbms

수평적 확장은 서버를 여러개로 늘리는 것을 의미한다.
수직적 확장 서버의 스펙 CPU,RAM을 업그레이드 한다. 


	SQL 장점
	-명확하게 정의된 스키마., 데이터 무결성 보장
	-관계는 각 데이터를 중복없이 한번만 저장

	NOSQL 장점
	스키마가 없기 때문에 유연함 ,구조에대한 정의를 변경할 필요없이 언제든지 저장된 데이터를 조정하고 새로운 필드 추가가능
	-데이터는 애플리케이션이 필요한 방식으로 저장된다. 데이터를 읽어오는 속도가 빨라진다.

	SQL 단점	
	- 덜유연하다. 데이터 스키마를 사전에 계획하고 알려야한다.
	- 관계를 맺고 있어서 조인문이 많은 복잡한 쿼리가 만들어질수있다.

	NOSQL 단점
	- 데이터 중복을 계속 업데이트 해야한다.
	- 데이터가 여러 컬랙션에 중복되어있기 때문에 수정시 모든 컬렉션에서 수정해야한다.


	


인덱스
	
	인덱스를 통해서 검색을하려면 인덱스를 적용하고 where절을 통해서 검색을 해야한다.

	인덱스는 데이터 검색을 빨리하기 위해서 사용한다.
	


	인덱스는 B-트리로 이루어 져있다.

	B- 트리
	최대 M개의 자식을 가질 수 있는 B트리를  M차 B트리
	각 노드의 자료가 정렬
	자료는 중복 x

	- 클러스터 인덱스(Cluster=무리,군집을 이루다)


	설명: 실제 데이터와 같은 무리의 인덱스, EX) 실제 데이터가 정렬된 사전

	생성시점: 테이블 생성시 기본키를 생성하면 기본적으로 만들어진다, NotNull과 Unique 조건을 걸면된다.

.
	리프노드에 테이블 자체가 저장되기떄문에 테이블의 해당열을 찾기위한 RID를 가질 필요가없다.
	검색 속도는 빠르지만 데이터 입력,수정 삭제가 느리다.

	입력,수정,삭제시에 페이지 분할과 사용안함 표시로 인해서 인덱스의 조각화가 심해져 성능이저하
	데이터 입력,수정,삭제시 정렬상태를 유지해야되기 때문에



	- 비클러스터 인덱스(보조 인덱스,세컨더리 인덱스)

	

	설명: 실제 데이터와 다른 무리의 별도의 인덱스, EX) 실제 데이터 탐색에 도움을 주는 별도의 찾아보기 페이지
	생성시점: 테이블 생성시 unique 조건을 주면 생성이 된다.

	인덱스 페이지는 로그파일에 저장한다, 레코드 원본은 정렬x, 인덱스 페이지만 정렬된다.
	인덱스 테이블 을 별도로 생성 해놓는다.
	리프노드에 실제 데이터값이 아닌 데이터가 위치한 행 번호인 RID를 가지고있다.

	검색 속도는 느리지만 데이터 입력,수정 삭제가 빠르다.
	데이터 입력,수정,삭제시 정렬상태를 유지하지 않기 때문에
	

인덱스 적용기준
	규모가 작지않은 테이블

	카디널리티: 그룹내 요소의 개수
	카디널리티가 높은(중복이 낮은) 것에 적용을 해야한다.
	복합 인덱스는 같음,정렬,다중 값, 카디널리티 순으로 생성해야된다.
	

	