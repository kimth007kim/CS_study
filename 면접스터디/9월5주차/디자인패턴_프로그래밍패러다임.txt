프로그래밍 패러다임

1.8 이전의 자바는 객체지향 프로그래밍을 지원
하스켈은 함수형 프로그래밍을 지원

함수형 프로그래밍은 선언형 패러다임의 일종이다.

고차함수를 통해 재사용성을 높인 프로그래밍 패러다임이다.


	고차함수: 함수가 함수를 값처럼 매개변수로 받아 로직을 생성할수 있는것


	일급 객체: 고차함수를 쓰기위해서는 해당언어가 일급 객체라는 특성을 가져야한다.
1. 변수나 메서드에 함수를 할당 가능
2. 함수안에 함수를 매개변수로 담을수있다
3. 함수가 함수를 반환 가능하다.


객체 지향 프로그래밍

	-다른 프로그래밍 패러다임에 비해 상대적으로 느리다.
	-데이터를 객체로 취급하여 객체 내부에 선언된 메서드를 활용하는 방식

객체 지향 프로그래밍의 특징

	- 추상화
	클래스의 공통적인 특성(변수,메서드)들을 묶어서 표현하는 방식 
	- 캡슐화
	데이터를 은닉하고 그데이터를 접근하지 못하게하는것
	- 다형성
	하나의 메서드나 클래스가 다양한 방법으로 동작하는것, 오버로딩과 오버라이딩이있다.
	- 상속성
	상위 클래스의 특성을 하위클래스가 이어받아서 재사용하거나 확장하는것을 말한다.

객체 지향의 설계원칙(SOLID)
	- 단일 책임의 원칙(Single Responsibitiy
	모든 클래스는 각각의 하나의 책임만을 가져야하는 원칙

	- 개방 폐쇄 원칙
	유지 보수사항이 생기면 쉽게 확장 수정은 닫혀있어야한다.

	- 리스코프 치환 원칙
	하위 타입의 인스턴스로 바꿀수 있어야된다. 부모객체를 자식객체로 바꿔도 동작하도록해야한다.

	- 인터페이스 분리 원칙
	하나의 일반적인 인터페이스보다 여러개의 구체적인 인터페이스를 만들어야한다.
	
	- 의존 역전 원칙
	상위 모듈은 하위모듈에 의존해서 안된다. 둘다 추상화에 의존해야한다. 구체적인것은 추상화에 의존해야한다.

절차형 프로그래밍

	유지보수성이 떨어진다. 모듈화하기 힘들다
	속도가 빠르다 가독성이 좋다























