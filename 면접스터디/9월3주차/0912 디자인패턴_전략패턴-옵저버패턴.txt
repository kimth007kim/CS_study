	- 디자인 패턴 

소프트웨어 디자인을 하는데 있어서 에서 공통적으로 마주치는 문제를 해결하는 방법

	- 전략 패턴

객체가 할수 있는 행위를 각각 전략으로 만들어놓고 사용,
동적으로 전략을 수정할수 있도록 하는 패턴

동일 계열 알고리즘을 정의한다.(run,walk,fly,rocket) 등등

각 알고리즘 캡슐화해서 이들을 상호교환 가능하게 한다.

기능별로 상속을 받는것을 예시로 들어본다면, 하위 클래스의 메서드들을 다 정의를 해줘야된다.,

	- 프록시 패턴
왜 사용?
객체 지향의 원칙인 OCP(Open-Closed Principle)을 지키기 위해서이다.



어떤 객체를 접근하기전에 사전에 대리인을 거쳐서 접근하는 패턴
보안,캐싱,로깅등등에사용한다.


-장점
	기존의 코드를 건들지 않고 새로운 기능을 추가 가능하다.
	기존의 코드가 해야하는 일만 유지할수 있다.
	기능 추가 및 초기화 지연 등으로 다양하게 활용할수 있다.
-단점
	코드의 복잡도가 증가한다.


옵저버 패턴

객태들을 관찰하다가 변화가있을때마다 옵저버에게 알려주는 패턴


nginx
경량된 웹서버이다. 정적 데이터를 응답해주는 경우로도쓰이고 , 로드밸런서 용도로사용된다. 


버퍼 오버플로우

공격을 할때 복귀주소를 원래 할당된 크기보다 더크게해버리면? 더 큰버퍼까지 침범해서 버퍼 오버플로우를 발생시켜서 서버를다운시키는것,
중요한 시스템영역의 파일을 수정해서 원하는 시스템콜을 호출하는 방법도있다.
tcp 흐름제어 하는 이유도 수신자랑 송신자랑 속도가 안맞아서 버퍼 오버플로우가 날수도있어서 그렇다.