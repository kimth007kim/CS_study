노트북으로 www.google.com에 접속을 했습니다. 요청을 보내고 받기까지의 과정을 자세히 설명해주세요.

OSI 7계층

TCP/IP의 각 계층을 설명해주세요.

OSI 7계층와 TCP/IP 계층의 차이를 설명해주세요.

TCP와 UDP의 차이를 설명해주세요.

TCP와 UDP의 헤더를 비교해주세요.

TCP의 3-way-handshake와 4-way-handshake를 비교 설명해주세요.

Q. TCP의 연결 설정 과정(3단계)과 연결 종료 과정(4단계)이 단계가 차이나는 이유?
	Client 가 데이터 전송을 마쳤다고 하더라도, Server는 아직 보낼 데이터가 남아있을수도 있기때문에 ,Fin에 대한 ACK만 보내고,
	데이터를 모두 전송한 후에도 자신도FiN메시지를 보낸다.

TCP/IP 흐름제어(flow control) & 혼잡제어(congestion control)

Frame, Packet, Segment, Datagram을 비교해주세요.

대칭키 & 공개키
	
	대칭키:
		동일한 방식으로 암호화 복호화하는것이다.
		누구든지 대칭키를 가지고있으면 복호화가 가능하다.

		장점:
		암호화/복호화 쉬움
		단점:
		키를 배송할때  문제가있다.

	공개키(비대칭키):
		서로다른키로 암호화 복호화 하는것
		암호화시에는 공개키를 사용하고 복호화시에는 개인키를 사용한다.
		누구든지 공개키를 가져도 상관이없다.
		장점:
		해커가 공개키를 가져도 문제가없다.
		키배송에 문제가없다
		단점:
		암호화 연산시에 시간이든다.
		

만약 Server에서 FIN 플래그를 전송하기 전에 전송한 패킷이 Routing 지연이나 패킷 유실로 인한 재전송 등으로 인해 FIN 패킷보다 늦게 도착하는 상황이 발생하면 어떻게 될까요?

초기 Sequence Number인 ISN을 0부터 시작하지 않고 난수를 생성해서 설정하는 이유가 무엇인가요?

HTTP 요청/응답 헤더의 구조를 설명해주세요.

HTTP GET과 POST 메서드를 비교/설명해주세요.

HTTP 문제점
	HTTP의 약점은 평문이기 때문에 도청가능하다.
	완전성 증명할수없어서 변조가 가능하다.

HTTPS
	SSL: 보안 계층 사용
	서버와 브라우저 사이에 안전하게 암호화된 연결을 만들게 도와준다.
	
	SEO:
	구글은 HTTPS 웹사이트에 가산점을준다. 검색엔진에 더 빈번하게 노출하게 해준다.


HTTP와 HTTPS에 대해서 설명하고 차이점에 대해 설명해주세요.

HTTP와 HTTPS 동작 과정을 비교해주세요.


1. Client는 Server로 임의의 데이터를 담은 통신 요청을 송신한다.
2. Server는 답변으로 역시 Server측에서 무작위로 생성한 데이터와 자신의 인증서를 송신한다.
3. Client는 브라우저에 내장된 CA(Certificate Authority)로 인증서의 진위 여부를 확인한다.
(CA의 인증을 받은 인증서는 CA의 개인키로 암호화되어 있어 CA의 공개키로 복호화할 수 있다.)
4. 성공적으로 인증받은 Server의 공개키를 확인하면, Client는 해당 Server를 신뢰하고 이후 대칭키와 비대칭키를 혼합해 사용한다.
(모든 데이터를 비대칭키로만 주고 받는 경우 과도한 부하가 발생하기 때문 -> SSL)
5. 먼저 대칭키를 생성하여 비대칭키로 주고 받아 안전하게 대칭키를 Server와 브라우저만 공유하는 대칭키를 설정한다.
6. 데이터를 대칭키를 사용해 암호화/복호화하며 데이터를 주고 받는다.

SSL/TLS
	SSL-> TLS버전
	웹 서버와 웹 브라우저 간의 보안을 위해 만든 프로토콜
	Let's Encrypt 와 AWS Certificate 두가지가 존재한다.
	공개키/개인키 대칭키 기반으로 사용한다.


SSL은 왜 필요할까?
	서버와 브라우저간 외부의 공격자로 부터 보안하기위해 필요하다.
	암호화의 대상은 비밀번호나 개인정보가 된다.

TLS/SSL handshake


SSL의 통신과정
	SSL은 공개키 방식으로 대칭키를 전달한다. 이 대칭키를 활용해서 브라우저가 암호화와 복호화를 수행한다.

	데이터 암호화 복호화를 위한 한쪽의 대칭키를 다른쪽의  공개키로 암호화해서 전송하면 자신의 개인키로 복호화하여,
	그 반대편의 대칭키를 알아내고 그 대칭키로 통신을 한다.


HTTP 3.0

	오류제어 방식중에 fac pac
 	udp 같은 경우에는 혼잡제어 안하는데 더욱더 속도가 빠르다. QUIC-FEC 
	스스로 수신자측에서 오류를 참조하는것이다.

Cookie  vs Session
Q. 세션을 사용하면 좋은데 왜 쿠키를 사용할까?
A. 세션이 쿠키에 비해 보안이 높은 편이나 쿠키를 사용하는 이유는 세션은 서버에 저장되고, 서버의 자원을 사용하기에

     서버 자원에 한계가 있고, 속도가 느려질 수 있기 때문에 자원관리 차원에서 쿠키와 세션을 적절한 요소 및 기능에 병행 사용하여

     서버 자원의 낭비를 방지하며 웹사이트의 속도를 높일 수 있다.



Jwt

RefreshToken AccessToken

