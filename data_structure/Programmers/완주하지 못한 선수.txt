import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;


class Solution {
    int cnt = 0;
    
    public String solution(String[] participant, String[] completion) {
        HashMap<String,Integer> ht = new HashMap<>();
        
        for(int i=0; i<participant.length; i++){
            if (ht.containsKey(participant[i])){
                ht.put(participant[i],ht.get(participant[i])+1);
            }else{
                ht.put(participant[i],1);
            }
        }
        String answer = "";
        for(int i=0; i<completion.length; i++){
           cnt=ht.get(completion[i])-1;
           ht.put(completion[i],cnt);
        }
        for(Entry<String,Integer> entrySet :ht.entrySet()){
            if (entrySet.getValue()>=1){
                answer= entrySet.getKey();
            }
        }
        return answer;
    }
}



===========================================================


접근 방식 
리스트로 remove add 하는 방식보다 해시맵 방식으로 키 밸류로 관리하는 방식이 시간복잡도 면에서 유리할것이라고 판단하여서 해시맵방식을 선택

공부했던 자료구조

Map: 검색의 개념이 가미된 인터페이스이다.

hashTable : hashMap이전 버전의 hash 자료구조
hash map 은 이미 존재하는 키값이 오면 동기화o
hash table 은 이미존재하는 키값이오면 동기화x